
1. 	
	1) 	True -> (v = 0 && i = 0)[v\0][i\0]
		<=>
		True -> (0 = 0 && 0 = 0)
	
	2) 	v = 0 && i = 0 -> v = sum (k=0..i-1) b[k] * 2^(N-K) && i < N+1

	3) 	{I && i <= N} S1; S2 {v = sum (k=0..i-1) b[k] * 2^(N-K) }
		<=>
		I && i <= N -> v*2 + b[i+1] = sum (k=0..i) b[k] * 2^(N-K) }


		I : v = sum (k=0..i-1) b[k] * 2^(N-K) && i < N+1

	4) 	I && i > N -> v = sum (k=0..i-1) b[k] * 2^(N-K)
		<=>
		i = N+1 && I -> v = sum (k=0..N) b[k] * 2^(N-K)


2.
	f (N, K) 	| 0 	k <= 0
				| N + f(N, K-1)

	BASICAMENTE TEMOS QUE O TEMPO DE EXECUSSÃO É N*K, LOGO É LINEAR

3.


void shift(int u[], int n, int k) {
		int aux, i; 
		while(k > 0) {
				i = n - 1;
				aux = u[i];
				while( i > 0 ) {
						u[i-1] = u[i];
						i = i - 1;
				}
				u[0] = aux;
				k = k - 1;
		}
}

4.

				10
			20 		30
						70
					40

	---------------------------------

				30
			10 		40
		20		 		70

	----------------------------------

				30
			10 		40
		20		 		70
					50

	----------------------------------

				30
			10 		50
		20		 40		70
					

5.
	O PIOR CASO É QUANDO TODOS OS ELEMENTOS FORAM INSERIDOS NO MESMO
	LUGAR NA TABELA, LOGO A PESQUISA CUSTA N

	O TEMPO DE EXECUSSAO É (SIZETABELA + N)

	NAO SEI MESMO QUE DIZER


6.

int valid_path(Graph g, int path[], int n) {
		int i,  found;
		struct edge *aux;
		for(i = 1; i < n; i++) {
			for(found = 0, aux = g[i-1]; aux != NULL; aux = aux->next) {
					if(aux->dest == path[i])
							found = 1;
			}
			if (found == 0)
					return 0;
		}
		return 1;
}

	A FUNÇÃO CUSTA N+E, SENDO E O NUMER DE ARESTA

	A FUNÇÃO CUSTA N+E, SENDO E O NUMER DE ARESTAS
